[{"F:\\Opinnot\\Mooc-fullstack-course-20\\osa_2\\maiden_tiedot\\src\\index.js":"1","F:\\Opinnot\\Mooc-fullstack-course-20\\osa_2\\maiden_tiedot\\src\\App.js":"2","F:\\Opinnot\\Mooc-fullstack-course-20\\osa_2\\maiden_tiedot\\src\\components\\Comp.js":"3"},{"size":156,"mtime":1608019505675,"results":"4","hashOfConfig":"5"},{"size":1268,"mtime":1608114940347,"results":"6","hashOfConfig":"5"},{"size":4210,"mtime":1608114801861,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"azpo8p",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"F:\\Opinnot\\Mooc-fullstack-course-20\\osa_2\\maiden_tiedot\\src\\index.js",[],["16","17"],"F:\\Opinnot\\Mooc-fullstack-course-20\\osa_2\\maiden_tiedot\\src\\App.js",[],"F:\\Opinnot\\Mooc-fullstack-course-20\\osa_2\\maiden_tiedot\\src\\components\\Comp.js",["18"],"import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport React from 'react'\r\n\r\nconst API_ACCESS_KEY = 'affd5c076ac3bbbb9a2ba264affe84da'\r\nconst weather_template = 'http://api.weatherstack.com/'\r\nconst API_REQUESTS = weather_template + 'current?access_key=' + API_ACCESS_KEY + '&query='\r\n\r\n\r\n\r\n//This is a template for rendering single countries\r\nconst SingleCountry = ({ country, languages, currentWeather, setWeather }) => {\r\n\r\n    const capital = country.capital\r\n\r\n    useEffect(() => {\r\n        console.log('weather hook')\r\n        axios\r\n        .get(API_REQUESTS + capital)\r\n        .then(response => {\r\n            console.log('promise fulfilled')\r\n            setWeather(response.data)\r\n        })\r\n    }, [])\r\n    console.log('weather: ', capital, currentWeather)\r\n\r\n    \r\n    return (\r\n        <>\r\n        <h1>{country.name}</h1>\r\n        <p>Capital: {country.capital}</p>\r\n        <p>Population: {country.population}</p>\r\n        <h2>Languages</h2>\r\n        <ul>\r\n            {languages}\r\n        </ul>\r\n        <h1>Flag of {country.name}</h1>\r\n        <img src={country.flag} alt='the country flag' width='250px' ></img>\r\n        <div>\r\n            <h1>Weather in {country.capital}</h1>\r\n            <p>Temperature: {currentWeather.current.temperature}</p>\r\n            <p><strong>Wind:</strong> {currentWeather.current.wind_speed} mph, direction {currentWeather.current.wind_dir}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//This gets the languages of a country\r\nfunction languages(country) {  \r\n    console.log(country.languages)\r\n    const language_list = country.languages.map(language => {\r\n    return (\r\n        <li key={language.name}>{language.name} or {language.nativeName}</li>\r\n    )})\r\n    return (\r\n        language_list\r\n    )\r\n}\r\n\r\n\r\n//This combines the multiple different outputs that can happen\r\nconst CountryRender = ({ countries, finder, setFinder }) => {\r\n\r\n    const [currentWeather, setWeather] = useState({\r\n        'current': {\r\n            'temperature': 0,\r\n            'wind_speed': 0,\r\n            'wind_dir': 'N',\r\n        }\r\n    })\r\n\r\n    //This is just for the filter function, which checks which ones are true in the list\r\n    function checkCountry(country) {\r\n        return country.name.toLowerCase().search(finder.toLowerCase()) !== -1\r\n    }\r\n\r\n    //Makes the countrylist with everything that is true with the finder\r\n    const countriesList = countries\r\n    .filter(checkCountry)\r\n    .map(country => {\r\n        return (\r\n            <p key={country.alpha3Code}>\r\n                {country.name} <button onClick={() => setFinder(country.name)}>show</button>\r\n            </p>\r\n        )\r\n    })\r\n\r\n\r\n    if (countriesList.length <= 10 && countriesList.length > 1) {\r\n        return (\r\n            <>\r\n            {countriesList}\r\n            </>\r\n        )\r\n\r\n\r\n    } else if (countriesList.length === 1) {\r\n\r\n        //This is horrible piece of spaghetti that is mashed together. I'm not certain if I like js.\r\n        const strippedCountry = countriesList[0]['props']['children'][0]\r\n        console.log('strippedCountry: ', strippedCountry)\r\n\r\n        //For filter function\r\n        function getCountry(country) {\r\n            return country.name === strippedCountry\r\n        }\r\n\r\n        const country =  countries.filter(getCountry)[0]\r\n        console.log('country object: ', country)\r\n\r\n\r\n        return (\r\n            <SingleCountry \r\n            country={country} \r\n            languages={languages(country)}\r\n            currentWeather={currentWeather}\r\n            setWeather={setWeather} \r\n            />\r\n        )\r\n    } else if (countriesList.length === 0) {\r\n        return (\r\n            <>\r\n            <p key='No_countries'>No countries.</p>\r\n            </>\r\n        )\r\n    } else {\r\n        return(\r\n        <>\r\n        <p key='too many matches'>\r\n            Too many matches, specify another filter.\r\n        </p>\r\n        </>\r\n    )}\r\n}\r\n\r\n\r\n//Gets the values of the finder input\r\nconst Finder = ({ value, onChange }) => {\r\n    return (\r\n        <>\r\n        Find Countries: <input\r\n        value={value}\r\n        onChange={onChange}\r\n        ></input>\r\n        </>\r\n    )\r\n}\r\n\r\nexport { CountryRender, Finder }",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":24,"column":8,"nodeType":"25","endLine":24,"endColumn":10,"suggestions":"26"},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'capital' and 'setWeather'. Either include them or remove the dependency array. If 'setWeather' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["29"],"no-global-assign","no-unsafe-negation",{"desc":"30","fix":"31"},"Update the dependencies array to be: [capital, setWeather]",{"range":"32","text":"33"},[736,738],"[capital, setWeather]"]